{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Header/Header.module.css","components/Navbar/Friends/FriendsInfo.module.css","components/Navbar/Navbar.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Users/users.module.css","assets/images/avatarUser.png","serviceWorker.js","components/Header/Header.jsx","components/Navbar/Friends/FriendsInfo.jsx","components/Navbar/Navbar.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","redux/profile-reducer.js","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/News/News.jsx","components/Music/Music.jsx","components/Settings/Settings.jsx","redux/dialogs-reducer.js","components/Dialogs/DialogsItem/DialogsItem.jsx","components/Dialogs/Message/Massage.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","redux/users-reducer.js","components/Users/Users.jsx","App.js","redux/sidebar-reducer.js","redux/redux-store.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Header","className","s","header","logo","src","alt","label","FriendsInfo","props","item","ava","name","fiendName","Navbar","friendsInfo","stete","friends","map","f","key","id","nav","to","activeClassName","activeLink","friendsItem","friendsMy","ProfileInfo","screen","initialState","posts","message","likesCount","newPostText","profileReducer","state","action","type","newText","Post","like","MyPosts","postsElement","p","i","newPostElement","React","createRef","ref","placeholder","onChange","text","current","value","updateNewPostText","onClick","addPost","MyPostsContainer","connect","profilePage","dispatch","updateNewPostTextActionCreator","Profile","News","Music","Settings","dialogs","messages","newMessageBody","dialogsReducer","body","DialogItem","dialog","active","avaDialogs","Message","Dialogs","dialogsPage","d","massagesElements","m","dialogsItems","e","target","updateNewMessageBody","sendMessage","DialogsContainer","updateNewMessageBodyCreator","users","usersReducer","u","userId","followed","UsersConnect","usersPage","follow","followAC","unfollow","unfollowAC","setUsers","setUsersAC","length","axios","then","response","data","items","photos","small","userPhoto","status","AppConnect","sidebar","path","render","reducer","combineReducers","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7bbd0236.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"avaDialogs\":\"Dialogs_avaDialogs__1hYcp\",\"activeLink\":\"Dialogs_activeLink__34w6e\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"label\":\"Header_label__1K-2H\",\"logo\":\"Header_logo__3_SJs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"FriendsInfo_item__2lrfS\",\"fiendName\":\"FriendsInfo_fiendName__33ID3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2imOE\",\"item\":\"Navbar_item__zmMk4\",\"activeLink\":\"Navbar_activeLink__3etBE\",\"friendsItem\":\"Navbar_friendsItem__pqScm\",\"friendsMy\":\"Navbar_friendsMy__tgW17\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"screen\":\"ProfileInfo_screen__39D8W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__1_En6\"};","module.exports = __webpack_public_path__ + \"static/media/avatarUser.b9b0490a.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport s from './Header.module.css';\n\nconst Header = () => {\n    return (\n        <header className={s.header}>\n\n            <div className={s.logo}>\n                <div><img src=\"https://cdn.worldvectorlogo.com/logos/react.svg\" alt=\"\"/></div>\n            </div>\n            <div className={s.label}><h3>cool<span>S</span>cial<span>N</span>etwork</h3></div>\n        </header>\n    )\n}\n\nexport default Header;\n\n","import React from 'react';\nimport s from './FriendsInfo.module.css'\n\nconst FriendsInfo = (props) => {\n    return (\n\n        <div className={s.item}>\n            <img src={props.ava} alt={props.name}/>\n            <div className={s.fiendName}><span>{props.name}</span></div>\n        </div>\n\n    )\n}\n\nexport default FriendsInfo;\n","import React from 'react';\nimport s from './Navbar.module.css';\nimport {NavLink} from \"react-router-dom\";\nimport FriendsInfo from \"./Friends/FriendsInfo\";\n\nconst Navbar = (props) => {\n\n    let friendsInfo = props.stete.friends.map(f => <FriendsInfo key={f.id} name={f.name} ava={f.ava}/>)\n    return (\n        <nav className={s.nav}>\n            <div className={s.item}><NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink></div>\n            <div className={s.item}><NavLink to='/dialogs' activeClassName={s.activeLink}>Messages</NavLink></div>\n            <div className={s.item}><NavLink to='/users' activeClassName={s.activeLink}>Users</NavLink></div>\n            <div className={s.item}><NavLink to='/news' activeClassName={s.activeLink}>News</NavLink></div>\n            <div className={s.item}><NavLink to='/music' activeClassName={s.activeLink}>Music</NavLink></div>\n            <div className={s.item}><NavLink to='/settings' activeClassName={s.activeLink}>Settings</NavLink></div>\n            <div className={s.friendsItem}><h3>Friends</h3><div className={s.friendsMy}>{friendsInfo}</div></div>\n        </nav>\n    )\n}\n\nexport default Navbar;\n","import React from 'react';\nimport s from './ProfileInfo.module.css'\n\nconst ProfileInfo = () => {\n    return (\n\n        <div>\n            <div className={s.screen}>\n                <img\n                    src=\"https://fartux.ru/wp-content/uploads/2018/03/fartux1055b_large-880x176.jpg\"\n                    alt=\"\"/>\n            </div>\n            <div>\n                Ava+description\n            </div>\n        </div>\n\n    )\n}\n\nexport default ProfileInfo;\n","//константы для определения типов (type) экшенов (action) для исключения ошибок при написании\n\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\nconst ADD_POST = 'ADD-POST';\n//инициализация первичных данных для state\n\nlet initialState={\n    posts: [\n        {id: 1, message: \"Hi, how are you?\", likesCount: 11},\n        {id: 2, message: \"It's my first post\", likesCount: 32},\n    ],\n    newPostText: ''\n}\n//блок по обработке экшенов (action) и пиходящих с ними данных\nexport const profileReducer=(state=initialState,action)=> {\n    switch (action.type) {\n        case ADD_POST:\n\n            return {\n                ...state,\n                newPostText: '',\n                posts: [...state.posts, {\n                    id: 3,\n                    message: state.newPostText,\n                    likesCount: 0\n                }]\n            }\n        case UPDATE_NEW_POST_TEXT:\n            return {\n                ...state,\n                newPostText: action.newText\n            }\n        default:\n            return state\n    }\n\n}\n\n// блок функций (action creator) для пропроса в диспачи методов и свойств\n//функции колбеки экшен криэйторы (action creat) для правильной передаци данных из места их вызова в редьюсеры\nexport const addPostActionCreator = () => ({type: ADD_POST})\n\nexport const updateNewPostTextActionCreator = (text) =>\n    ({type: UPDATE_NEW_POST_TEXT, newText: text})\n\n\nexport default profileReducer\n","import React from 'react';\nimport s from './Post.module.css'\n\nconst Post = (props) => {\n    return (\n        <div\n            className={s.item}>\n            <img src=\"https://materiell.com/wp-content/uploads/2015/03/john-full.png\" alt=\"\"/>\n            {props.message}\n            <div><span>Like {props.like}</span></div>\n        </div>\n        \n    )\n}\n\nexport default Post;","import React from 'react';\nimport s from './MyPosts.module.css'\nimport Post from \"./Post/Post\";\n// import {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profile-reducer\";\n\nconst MyPosts = (props) => {\n\n    let postsElement = props.posts.map((p, i) => <Post key={i} message={p.message} like={p.likesCount}/>)\n\n    let newPostElement = React.createRef()\n\n    let onAddPost = () => {\n        props.addPost()\n        // props.dispatch(addPostActionCreator())\n\n    }\n    let onPostChange = () => {\n        let text = newPostElement.current.value\n        props.updateNewPostText(text)\n        // let action = updateNewPostTextActionCreator(text);\n        // props.dispatch(action)\n    }\n\n    return (\n        <div>\n            <h3>My Posts</h3>\n            <div>\n                <div><textarea ref={newPostElement}\n                               placeholder=\"Put text\"\n                               onChange={onPostChange}\n                               value={props.newPostText}/></div>\n                <div>\n                    <button onClick={onAddPost}>Add posts</button>\n                    <button>Remove</button>\n                </div>\n\n            </div>\n            <div className={s.posts}>\n                {postsElement}\n            </div>\n        </div>\n    )\n}\n\nexport default MyPosts;\n","import {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profile-reducer\"; // функции с редюсара создающие action\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\n//берём данные из state и закидываем в  пропс\nlet mapStateToProps = (state) => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText\n    }\n}\n//Передаём колбеки (они внутри себя диспачется сответсвенно и название)\n// когда мы запускаем функцию MapStateToProps происходит сравнение\n// данных и если данные изменены происходит перерисовка\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        updateNewPostText: (text) => {\n            let action = updateNewPostTextActionCreator(text);\n            dispatch(action)\n        },\n        addPost: () => {\n            dispatch(addPostActionCreator())\n        }\n    }\n}\n\n//Вызываем connect функцыю два раза 1 передаём mapStateToProps,mapDispatchToProps вторым презентационную коспоненту Dialogs\nconst MyPostsContainer=connect(mapStateToProps,mapDispatchToProps)(MyPosts)\nexport default MyPostsContainer;\n","import React from 'react';\nimport './Profile.module.css';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\nconst Profile = (props) => {\n\n    return (\n        <div>\n            <ProfileInfo/>\n\n            <MyPostsContainer\n                // store={props.store}\n            />\n        </div>\n    )\n}\n\nexport default Profile;\n","import React from \"react\";\nimport s from './News.module.css';\n\nconst  News=(props)=>{\n    return (\n        <div>\n            News\n        </div>\n    )\n}\n\nexport default News;","import React from \"react\";\nimport s from './Music.module.css';\n\nconst  Music=(props)=>{\n    return (\n        <div>\n            Music\n        </div>\n    )\n}\n\nexport default Music;","import React from \"react\";\nimport s from './Settings.module.css';\n\nconst  Settings=(props)=>{\n    return (\n        <div>\n            Settings\n        </div>\n    )\n}\n\nexport default Settings;","//константы для определения типов (type) экшенов (action) для исключения ошибок при написании\n\nconst UPDATE_NEW_MESSAGE_BODY = 'UPDATE-NEW-MESSAGE-BODY';\nconst SEND_MESSAGE = 'SEND-MESSAGE'\n//инициализация первичных данных для state\n\nlet initialState = {\n dialogs: [\n  {id: 1, name: \"Dimych\", ava: \"https://materiell.com/wp-content/uploads/2015/03/john-full.png\"},\n  {id: 2, name: \"Andrey\", ava: \"https://materiell.com/wp-content/uploads/2015/03/john-full.png\"},\n  {id: 3, name: \"Sveta\", ava: \"https://materiell.com/wp-content/uploads/2015/03/john-full.png\"},\n  {id: 4, name: \"Sasha\", ava: \"https://materiell.com/wp-content/uploads/2015/03/john-full.png\"},\n  {id: 5, name: \"Viktor\", ava: \"https://materiell.com/wp-content/uploads/2015/03/john-full.png\"},\n  {id: 6, name: \"Valera\", ava: \"https://materiell.com/wp-content/uploads/2015/03/john-full.png\"},\n ],\n messages: [\n  {id: 1, ava: \"https://materiell.com/wp-content/uploads/2015/03/john-full.png\", message: \"hi\"},\n  {id: 2, ava: \"https://materiell.com/wp-content/uploads/2015/03/john-full.png\", message: \"How are you?\"},\n  {\n   id: 3,\n   ava: \"https://materiell.com/wp-content/uploads/2015/03/john-full.png\",\n   message: \"I am fine and you.\"\n  },\n  {\n   id: 4,\n   ava: \"https://materiell.com/wp-content/uploads/2015/03/john-full.png\",\n   message: \"Fine and Cool!!!\"\n  }\n ]\n ,\n newMessageBody: ''\n}\n//блок по обработке экшенов (action) и пиходящих с ними данных\nexport const dialogsReducer = (state=initialState, action) => {\n //делаем копирование обекта\n switch (action.type) {\n\n  case UPDATE_NEW_MESSAGE_BODY:\n   return {\n    ...state,\n    newMessageBody: action.body\n   }\n\n  case SEND_MESSAGE:\n\n   return {\n    ...state,\n    messages: [...state.messages, {\n     id: 5,\n     ava: \"https://materiell.com/wp-content/uploads/2015/03/john-full.png\",\n     message: state.newMessageBody\n    }],\n    newMessageBody: ''\n   }\n\n  default:\n   return state\n }\n}\n// блок функций (action creator) для пропроса в диспачи методов и свойств\n//функции колбеки экшен криэйторы (action creat) для правильной передаци данных из места их вызова в редьюсеры\nexport const sendMessageCreator = () => ({type: SEND_MESSAGE})\n\nexport const updateNewMessageBodyCreator = (body) =>\n    ({type: UPDATE_NEW_MESSAGE_BODY, body: body})\n\n\nexport default dialogsReducer\n","import React from \"react\";\nimport s from './../Dialogs.module.css';\nimport {NavLink} from \"react-router-dom\";\n\nconst DialogItem = (props) => {\n    return <div className={s.dialog + ' ' + s.active}>\n        <NavLink to={\"/dialogs/\" + props.id} activeClassName={s.activeLink}>\n            <img className={s.avaDialogs} src={props.ava} alt={props.name}/>\n            {props.name}\n        </NavLink>\n    </div>\n}\n\nexport default DialogItem\n","import React from \"react\";\nimport s from './../Dialogs.module.css';\n\nconst Message = (props) => {\n    return <div className={s.message}><img src={props.ava} alt={''}/>{props.message}</div>\n}\n\nexport default Message\n","import React from \"react\";\nimport s from './Dialogs.module.css';\nimport DialogItem from \"./DialogsItem/DialogsItem\";\nimport Message from \"./Message/Massage\";\n\n\nconst Dialogs = (props) => {\n\n    let state=props.dialogsPage\n\n    let dialogs = state.dialogs.map((d, i) =>\n\n        <DialogItem key={i} name={d.name} id={d.id} ava={d.ava}/>)\n\n    let massagesElements =  state.messages.map(\n        (m, i) => <Message key={i} id={m.id} message={m.message} ava={m.ava}/>)\n\n    let newMessageBody = state.newMessageBody\n\n\n\n    let onSendMessageClick = () => {\n        props.sendMessage()\n    }\n    let onNewMessageChange  = (e) => {\n        let body = e.target.value\n        props.updateNewMessageBody(body)\n       // props.store.dispatch(updateNewMessageBodyCreator(body))\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogs}\n            </div>\n            <div className={s.messages}>\n                <div>{massagesElements}</div>\n\n                <div>\n                    <div>\n                    <textarea onChange={onNewMessageChange }\n                              value={newMessageBody}\n                              placeholder='Enter your message'>\n                    </textarea>\n                    </div>\n                    <div>\n                        <button onClick={onSendMessageClick}>Send</button>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n\n    )\n}\n\nexport default Dialogs\n","import {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reducer\"; // функции с редюсара создающие action\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\n\n\n//берём данные из state и закидываем в  пропс\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage\n\n\n    }\n}\n//Передаём колбеки (они внутри себя диспачется сответсвенно и название)\n// когда мы запускаем функцию MapStateToProps происходит сравнение\n// данных и если данные изменены происходит перерисовка\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        updateNewMessageBody: (body) => {\n            dispatch(updateNewMessageBodyCreator(body))\n        },\n        sendMessage: () => {\n            dispatch(sendMessageCreator())\n        }\n    }\n}\n//Вызываем connect функцыю два раза 1 передаём mapStateToProps,mapDispatchToProps вторым презентационную коспоненту Dialogs\nconst DialogsContainer=connect(mapStateToProps,mapDispatchToProps)(Dialogs)\nexport default DialogsContainer\n","//константы для определения типов (type) экшенов (action) для исключения ошибок при написании\n\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\n//инициализация первичных данных для state\n\nlet initialState = {\n users: [\n  // {id: 1,photoUrl:\"https://materiell.com/wp-content/uploads/2015/03/john-full.png\", followed: false, fullName: \"Nike\", status: \"I am a boss\", location: {city: 'Kiev', country: \"Ukraine\"}},\n  // {id: 2,photoUrl:\"https://materiell.com/wp-content/uploads/2015/03/john-full.png\", followed: true, fullName: \"Ira\", status: \"I am a boss\", location: {city: 'Moskva', country: \"Russia\"}},\n  // {id: 3,photoUrl:\"https://materiell.com/wp-content/uploads/2015/03/john-full.png\", followed: false, fullName: \"Max\", status: \"I am a boss\", location: {city: 'Minsk', country: \"Belarus\"}},\n ],\n\n}\n//блок по обработке экшенов (action) и пиходящих с ними данных\nexport const usersReducer = (state = initialState, action) => {\n switch (action.type) {\n  case FOLLOW:\n   return {\n    ...state,\n    users: state.users.map(u => {\n     if (u.id === action.userId) {\n      return {\n       ...u, followed: true\n      }\n     }\n     return u\n    })\n   }\n\n  case UNFOLLOW:\n   return {\n    ...state,\n    users: state.users.map(u => {\n     if (u.id === action.userId) {\n      return {\n       ...u, followed: false\n      }\n     }\n     return u\n    })\n   }\n\n  case SET_USERS:\n   return {\n    ...state,\n    users: [...state.users,...action.users]\n   }\n\n  default:\n   return state\n }\n\n}\n\n// блок функций (action creator) для пропроса в диспачи методов и свойств\n//функции колбеки экшен криэйторы (action creat) для правильной передаци данных из места их вызова в редьюсеры\nexport const followAC = (userId) => ({type: FOLLOW, userId})\nexport const unfollowAC = (userId) => ({type: UNFOLLOW, userId})\n\nexport const setUsersAC = (users) =>\n    ({type: SET_USERS,users})\n\n\nexport default usersReducer\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {followAC, setUsersAC, unfollowAC} from \"../../redux/users-reducer\";\nimport s from './users.module.css'\nimport * as axios from \"axios\";\nimport userPhoto from \"../../assets/images/avatarUser.png\"\nlet Users = (props) => {\n    //делаем проверку иначе будет ошибка зацыкливания\n    if(props.users.length===0){\n         axios.get(\"https://social-network.samuraijs.com/api/1.0/users\").then(\n             response=>{\n\n                 props.setUsers(response.data.items)\n             }\n         )\n    }\n    return <div>\n        {\n            props.users.map(u => <div key={u.id}>\n                <span>\n                    <div>\n\n                    <img src={u.photos.small!==null?u.photos.small:userPhoto} alt=\"\" className={s.userPhoto}/>\n                    </div>\n\n                    {\n                        u.followed ?\n                            <button onClick={() => {props.unfollow(u.id)}}>\n                                Unfollow\n                            </button> :\n                            <button onClick={() => {props.follow(u.id)}}>\n                                Follow\n                            </button>\n                    }\n\n                </span>\n                <span>\n                    <span>\n                        <div>{u.name}</div>\n                        <div>{u.status}</div>\n                    </span>\n                    <span>\n                       <div>{\"u.location.country\"}</div>\n                        <div>{\"u.location.city\"}</div>\n                    </span>\n                </span>\n            </div>)\n        }\n    </div>\n}\n\n//берём данные из state и закидываем в  пропс\n// когда мы запускаем функцию MapStateToProps происходит сравнение\n// данных и если данные изменены происходит перерисовка\nlet mapStateToProps = (state) => {\n    return {\n        // в пропсы попадает свойство что мы напишем\n        users: state.usersPage.users\n    }\n}\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        // в пропсы попадает свойство что мы напишем\n\n        follow: (userId) => {\n            dispatch(followAC(userId))\n        },\n        unfollow: (userId) => {\n            dispatch(unfollowAC(userId))\n        }\n        , setUsers: (users) => {\n            dispatch(setUsersAC(users))\n        }\n    }\n}\n//Вызываем connect функцыю два раза 1 передаём mapStateToProps,mapDispatchToProps вторым презентационную коспоненту Dialogs\nconst UsersConnect = connect(mapStateToProps, mapDispatchToProps)(Users);\nexport default UsersConnect;\n","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Profile from \"./components/Profile/Profile\";\nimport {Route} from \"react-router-dom\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\n import {connect} from \"react-redux\";\nimport Users from \"./components/Users/Users\";\n\n\nconst App = (props) => {\n return (\n            <div className='app-wrapper'>\n                <Header/>\n                <Navbar stete={props.state}/>\n                <div className='app-wrapper-content'>\n                    <Route path='/dialogs' //Route компонета контролирующая состояние строки URL при совпадении\n                        // адреса отрисовывает нужную компоненту без перезагрузки всей страницы\n                           render={() => <DialogsContainer/>}\n                        //метод render используеться для вызова анонимной функции,\n                        // которая отрисовывает компоненту, это для передачи props\n                    />\n                    <Route path='/profile'\n                           render={() => <Profile\n                            />}/>\n                    <Route path='/users'\n                           render={() => <Users\n                               // store={props.store}\n                           />}/>\n                    <Route path='/news' render={() => <News/>}/>\n                    <Route path='/music' render={()=><Music/> } />\n                    <Route path='/settings' render={()=><Settings/> } />\n                </div>\n            </div>\n    );\n};\n\n//берём данные из state и закидываем в  пропс\n // когда мы запускаем функцию MapStateToProps происходит сравнение\n// данных и если данные изменены происходит перерисовка\nlet mapStateToProps=(state)=>{\n    return{\n        state: state.sidebar\n    }\n}\n\n//Вызываем connect функцыю два раза 1 передаём mapStateToProps,mapDispatchToProps вторым презентационную коспоненту Dialogs\nconst AppConnect = connect(mapStateToProps, null)(App);\nexport default AppConnect;\n\n\n","let  initialState={\n friends: [\n  {id: 1, name: \"Dimych\", ava: \"https://materiell.com/wp-content/uploads/2015/03/john-full.png\"},\n  {id: 2, name: \"Sveta\", ava: \"https://materiell.com/wp-content/uploads/2015/03/john-full.png\"},\n  {id: 3, name: \"Viktor\", ava: \"https://materiell.com/wp-content/uploads/2015/03/john-full.png\"}\n ]\n}\nexport const sidebarReducer = (state=initialState, action) => {\n return state\n}\n","import {combineReducers, createStore} from \"redux\";\nimport {profileReducer} from \"./profile-reducer\";\nimport {dialogsReducer} from \"./dialogs-reducer\";\nimport {sidebarReducer} from \"./sidebar-reducer\";\nimport {usersReducer} from \"./users-reducer\";\n//функция combineReducers объединяет редьюсары\n//reducer чистая функцыя которая принимает старый стейт и екшин\n//модифицырует стейт если нужно и возваращает изменённый\nlet reducer=combineReducers({\n    profilePage:profileReducer,\n    // profileReducer,\n    dialogsPage:dialogsReducer,\n    // dialogsReducer,\n    sidebar:sidebarReducer,\n    // sidebarReducer\n    usersPage:usersReducer\n})\n\nlet store =createStore(reducer) //создаём store  спомощю redux\n\nwindow.store=store\n\nexport default store\n","import ReactDOM from 'react-dom';\nimport React from \"react\";\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport './index.css';\nimport {Provider} from \"react-redux\"\nimport store from \"./redux/redux-store\";\nimport {BrowserRouter} from \"react-router-dom\";\n\n\n    ReactDOM.render(\n        <BrowserRouter>\n            <Provider store={store}>{/*Provider метод из react-redux для проброса\n                                        store в контекст(доступен глобально для дочерних компонент)\n                                        доступен через connect*/}\n                <App/>\n            </Provider>\n        </BrowserRouter>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}